
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;

/**
 * This class is a JPanel with two text fields for an email title and recipient
 * and with a text pane for an actual email itself
 * 
 * @author Alex Barr
 */
public class EmailBlock extends JPanel
{
    private static final int WIDTH = 570;
    private static final int HEIGHT = 250;
    private JTextField titleField;
    private JTextField recipientField;
    private JTextField senderField;
    private JTextPane emailPane;
    private View GUI;

    EmailBlock(View v)
    {
	GUI = v;
	Dimension blockSize = new Dimension(WIDTH, HEIGHT);

	/*
	 * //Configure emailBlock 
	 * this.setLayout(new BoxLayout(this,
	 * BoxLayout.PAGE_AXIS)); this.setPreferredSize(blockSize);
	 * this.setBorder(new EmptyBorder(10, 10, 10, 10));
	 * 
	 * //Configure titleField 
	 * titleField.setMinimumSize(fieldSize);
	 * titleField.setMaximumSize(fieldSize);
	 * titleField.setBorder(BorderFactory.createLineBorder(Color.gray));
	 * 
	 * //Configure recipientField 
	 * recipientField.setMinimumSize(fieldSize);
	 * recipientField.setMaximumSize(fieldSize);
	 * recipientField.setBorder(BorderFactory.createLineBorder(Color.gray));
	 * 
	 * //Configure senderField 
	 * senderField.setMinimumSize(fieldSize);
	 * senderField.setMaximumSize(fieldSize);
	 * senderField.setBorder(BorderFactory.createLineBorder(Color.gray));
	 * 
	 * //Configure emailPane
	 * emailPane.setBorder(BorderFactory.createLineBorder(Color.gray));
	 * resetEmailForm();
	 * 
	 * //Add fields and pane 
	 * this.add(titleField, BorderLayout.NORTH);
	 * this.add(recipientField, BorderLayout.CENTER); this.add(senderField,
	 * BorderLayout.CENTER); this.add(emailPane, BorderLayout.SOUTH);
	 */

	this.setLayout(new GridBagLayout());

	JLabel titleLabel = new JLabel("Title: ");
	this.addItem(titleLabel, 0, 0, 1, 1, GridBagConstraints.FIRST_LINE_START);
	
	titleField = new JTextField("Title");
	this.addItem(titleField, 1, 0, 1, 1, GridBagConstraints.FIRST_LINE_START);

	JLabel toLabel = new JLabel("To: ");
	this.addItem(toLabel, 0, 1, 1, 1, GridBagConstraints.FIRST_LINE_START);

	recipientField = new JTextField("Recipient");
	this.addItem(recipientField, 1, 1, 1, 1, GridBagConstraints.FIRST_LINE_START);

	JLabel fromLabel = new JLabel("From: ");
	this.addItem(fromLabel, 0, 2, 1, 1, GridBagConstraints.FIRST_LINE_START);
	
	senderField = new JTextField("Sender");
	this.addItem(senderField, 1, 2, 1, 1, GridBagConstraints.FIRST_LINE_START);
	
	emailPane = new JTextPane();
	GridBagConstraints c = new GridBagConstraints();
	c.gridx = 0;
	c.gridy = 3;
	c.weightx = 2;
	c.anchor = GridBagConstraints.FIRST_LINE_START;
	c.fill = GridBagConstraints.BOTH;
	this.add(emailPane, c);
	
	this.setPreferredSize(blockSize);
	this.setBorder(new EmptyBorder(10, 10, 10, 10));
    }

    /**
     * Gets the title
     * 
     * @return the title
     */
    public String getTitle()
    {
	return titleField.getText();
    }

    /**
     * Gets the recipient
     * 
     * @return the recipient
     */
    public String getRecipient()
    {
	return recipientField.getText();
    }

    /**
     * Gets the sender
     * 
     * @return the sender
     */
    public String getSender()
    {
	return senderField.getText();
    }

    /**
     * Gets the text of the email
     * 
     * @return the email text
     */
    public String getEmailText()
    {
	return emailPane.getText();
    }

    /**
     * Hides the two text fields and the text pane
     */
    public void hideComponents()
    {
	titleField.setVisible(false);
	recipientField.setVisible(false);
	senderField.setVisible(false);
	emailPane.setVisible(false);
    }

    /**
     * Shows the two text fields and the text pane and does nothing if they
     * aren't hidden in the first place
     */
    public void showComponents()
    {
	titleField.setVisible(true);
	recipientField.setVisible(true);
	senderField.setVisible(true);
	emailPane.setVisible(true);
    }
    
    private void addItem(Component component, int x, int y, int width,
	    int height, int align)
    {
	GridBagConstraints c = new GridBagConstraints();
	c.gridx = x;
	c.gridy = y;
	c.gridwidth = width;
	c.gridheight = height;
	c.weightx = 1.0;
	c.weighty = 0.0;
	c.anchor = align;
	c.fill = GridBagConstraints.HORIZONTAL;
	this.add(component, c);
    }

    public void composeEmailForm()
    {
	showComponents();
	senderField.setVisible(false);
    }

    /**
     * Resets the email form with default field labels
     */
    public void resetEmailForm()
    {
	titleField.setText("title");
	recipientField.setText("recipient");
	senderField.setText("sender");
	emailPane.setText("email");
    }

    /**
     * Fills out the email form with an email's contents
     * 
     * @param sender
     *            the email address of the sender
     * @param recipient
     *            the address of the recipient
     * @param title
     *            the title of the email
     * @param message
     *            the email message
     */
    public void readEmailForm(String sender, String recipient, String title, String message)
    {
	showComponents();
	titleField.setText(title);
	recipientField.setText(recipient);
	senderField.setText(sender);
	emailPane.setText(message);
    }

    /**
     * Returns whether the compose-email form is visible
     * 
     * @return true if the compose-email form is visible
     */
    public boolean isComposeFormVisible()
    {
	return (titleField.isVisible() && recipientField.isVisible() && emailPane.isVisible());
    }

    /**
     * Returns whether the read-email form is visible
     * 
     * @return true if the read-email form is visible
     */
    public boolean isReadFormVisible()
    {
	return (isComposeFormVisible() && senderField.isVisible());
    }

}
